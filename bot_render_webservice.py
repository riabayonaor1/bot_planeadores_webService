#!/usr/bin/env python3
"""
Planeador-Aula-Rick-Bot - VERSI√ìN RENDER WEB SERVICE GRATUITO
Adaptado para funcionar como web service en lugar de worker
Incluye webhook para Telegram y endpoint de health check
"""

import asyncio
import json
import os
import logging
import tempfile
import re
from datetime import datetime
from typing import Dict, List, Any, Optional
from dotenv import load_dotenv

# Importaciones para web service
from flask import Flask, request, jsonify
import threading

# Importaciones del bot original
import google.generativeai as genai
import pandas as pd
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')  # Nueva variable para webhook

# Validaci√≥n de variables de entorno
if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN no encontrado")
    exit(1)

if not GOOGLE_API_KEY:
    logger.error("‚ùå GOOGLE_API_KEY no encontrado")
    exit(1)

# Configurar Google AI
genai.configure(api_key=GOOGLE_API_KEY)

# Crear aplicaci√≥n Flask
app = Flask(__name__)

# Variable global para la aplicaci√≥n de Telegram
telegram_app = None

# [Aqu√≠ ir√≠a todo el c√≥digo del bot original - clases y funciones]
# Por brevedad, incluyo solo la estructura principal

class PlaneadorEducativo:
    """Clase principal del planeador educativo"""
    
    def __init__(self):
        self.model = genai.GenerativeModel('gemini-pro')
        # Cargar est√°ndares MEN
        self.estandares_men = self.cargar_estandares_men()
    
    def cargar_estandares_men(self):
        """Cargar est√°ndares del MEN desde archivo"""
        try:
            with open('estandares_men_detailed.txt', 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è Archivo de est√°ndares no encontrado")
            return "Est√°ndares b√°sicos de educaci√≥n colombiana"

# Instancia global del planeador
planeador = PlaneadorEducativo()

# Handlers del bot (simplificados)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start"""
    welcome_text = """
üéì ¬°Bienvenido al Planeador Educativo Rick! üéì

Soy tu asistente para crear planeaciones educativas siguiendo los est√°ndares del MEN de Colombia.

üìö **¬øQu√© puedo hacer por ti?**
‚Ä¢ Crear planeaciones por competencias
‚Ä¢ Generar actividades pedag√≥gicas
‚Ä¢ Adaptar contenidos por grados
‚Ä¢ Exportar en PDF y Excel

üöÄ **Comandos disponibles:**
/planear - Crear nueva planeaci√≥n
/ayuda - Ver ayuda detallada

¬°Empecemos a planear juntos! üìù‚ú®
"""
    await update.message.reply_text(welcome_text)

async def planear_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /planear"""
    keyboard = [
        [InlineKeyboardButton("üìö Matem√°ticas", callback_data="materia_matematicas")],
        [InlineKeyboardButton("üî¨ Ciencias", callback_data="materia_ciencias")],
        [InlineKeyboardButton("üìñ Lenguaje", callback_data="materia_lenguaje")],
        [InlineKeyboardButton("üåç Sociales", callback_data="materia_sociales")],
        [InlineKeyboardButton("üé® Art√≠stica", callback_data="materia_artistica")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìö **Selecciona la materia para tu planeaci√≥n:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Configurar aplicaci√≥n de Telegram
def setup_telegram_app():
    """Configurar la aplicaci√≥n de Telegram"""
    global telegram_app
    
    telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Agregar handlers
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("planear", planear_comando))
    
    return telegram_app

# Rutas Flask
@app.route('/')
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "ok",
        "service": "Planeador Educativo Rick Bot",
        "timestamp": datetime.now().isoformat()
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint para recibir updates de Telegram"""
    try:
        update = Update.de_json(request.get_json(), telegram_app.bot)
        asyncio.run(telegram_app.process_update(update))
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"Error procesando webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/set_webhook', methods=['POST'])
def set_webhook():
    """Configurar webhook de Telegram"""
    try:
        webhook_url = request.json.get('webhook_url')
        if not webhook_url:
            return jsonify({"error": "webhook_url requerido"}), 400
        
        # Configurar webhook
        asyncio.run(telegram_app.bot.set_webhook(webhook_url))
        return jsonify({"status": "webhook configurado", "url": webhook_url})
    except Exception as e:
        logger.error(f"Error configurando webhook: {e}")
        return jsonify({"error": str(e)}), 500

def main():
    """Funci√≥n principal"""
    logger.info("üöÄ Iniciando Planeador Educativo Rick Bot (Web Service)")
    
    # Configurar aplicaci√≥n de Telegram
    setup_telegram_app()
    
    # Configurar webhook si est√° definido
    if WEBHOOK_URL:
        logger.info(f"üì° Configurando webhook: {WEBHOOK_URL}")
        asyncio.run(telegram_app.bot.set_webhook(f"{WEBHOOK_URL}/webhook"))
    
    # Iniciar servidor Flask
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üåê Iniciando servidor web en puerto {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    main()

